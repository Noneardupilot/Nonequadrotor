/******************************************************************************************************************
**头文件说明 ： 软件iic驱动文件
**时      间 ： 2018-5-8
**作      者 ： 历小伟
**联系 方式  ： 15982962929
**备      注 ： 配置IIC驱动的文件,其中使用了两组IIC,IIC1用在外接IIC,IIC2使用在驱动TCA62724FMG的RGB芯片
**              IIC1: PB8---IIC1_SCL    PB9---IIC1_SDA
**              IIC2: PB10---IIC2_SCL   PB11---IIC2_SDA
******************************************************************************************************************/


/*=============================================================================================================
                                         头文件START
==============================================================================================================*/

#include "dev_soft_iic.h"
#include "copter.h"

/*=============================================================================================================
                                         头文件START
==============================================================================================================*/

DEV_SOFT_IIC IIC2;  //创建对象



/*==================================================================================================================*/
/*==================================================================================================================*
**函数原型 : void DEV_SOFT_IIC::I2C_GpioInit(void)
**功    能 : 软件IIC初始化函数
**输    入 : None
**输    出 : None
**备    注 : 
**================================================================================================================*/
/*================================================================================================================*/	
void DEV_SOFT_IIC::I2C_GpioInit(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_I2C_PORT, ENABLE);	/* 打开GPIO时钟 */


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		/* 设为输出口 */
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;		/* 设为开漏模式 */
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	/* IO口最大速度 */
	
	
	GPIO_InitStructure.GPIO_Pin = I2C_SCL_PIN | I2C_SDA_PIN;
	GPIO_Init(GPIO_PORT_I2C, &GPIO_InitStructure);

	/* 给一个停止信号, 复位I2C总线上的所有设备到待机模式 */
	I2C_Stop();
}

/*=======================================================================================================================*/
/*=======================================================================================================================*
**函数原型 : void DEV_SOFT_IIC::IIC_Test_RGBled(void)
**功    能 : 软件IIC测试
**输    入 : None
**输    出 : None
**备    注 : 
**=====================================================================================================================*/
/*=====================================================================================================================*/	
void DEV_SOFT_IIC::IIC2_Test_RGBled(void)
{
	IIC2_Write_nByte(DEV_RGBLED_Driver_Write_ADDR,0x01,&DEV_RGBLED_Color_Index[0][0],4);
	System_set.delay_ms(500); 
  IIC2_Write_nByte(DEV_RGBLED_Driver_Write_ADDR,0x01,&DEV_RGBLED_Color_Index[1][0],4);
	System_set.delay_ms(500); 
	IIC2_Write_nByte(DEV_RGBLED_Driver_Write_ADDR,0x01,&DEV_RGBLED_Color_Index[2][0],4);
	System_set.delay_ms(500); 
  IIC2_Write_nByte(DEV_RGBLED_Driver_Write_ADDR,0x01,&DEV_RGBLED_Color_Index[3][0],4);
	System_set.delay_ms(500); 

}


/*==================================================================================================================*/
/*==================================================================================================================*
**函数原型 : void DEV_SOFT_IIC::I2C_Delay(void)
**功    能 : 软件IIC延迟
**输    入 : None
**输    出 : None
**备    注 : 
**================================================================================================================*/
/*================================================================================================================*/	
void DEV_SOFT_IIC::I2C_Delay(void)
{
	uint8_t i;

	/*　
		CPU主频168MHz时，在内部Flash运行, MDK工程不优化。用台式示波器观测波形。
		循环次数为5时，SCL频率 = 1.78MHz (读耗时: 92ms, 读写正常，但是用示波器探头碰上就读写失败。时序接近临界)
		循环次数为10时，SCL频率 = 1.1MHz (读耗时: 138ms, 读速度: 118724B/s)
		循环次数为30时，SCL频率 = 440KHz， SCL高电平时间1.0us，SCL低电平时间1.2us

		上拉电阻选择2.2K欧时，SCL上升沿时间约0.5us，如果选4.7K欧，则上升沿约1us

		实际应用选择400KHz左右的速率即可
	*/
	for (i = 0; i < 50; i++);
}

/*==================================================================================================================*/
/*==================================================================================================================*
**函数原型 : void I2C_Start(void)
**功    能 : 软件IIC开始信号
**输    入 : None
**输    出 : None
**备    注 : 
**================================================================================================================*/
/*================================================================================================================*/	
void DEV_SOFT_IIC::I2C_Start(void)
{
	/* 当SCL高电平时，SDA出现一个下跳沿表示I2C总线启动信号 */
	I2C_SDA_1();
	I2C_SCL_1();
	I2C_Delay();
	I2C_SDA_0();
	I2C_Delay();
	I2C_SCL_0();
	I2C_Delay();
}

/*==================================================================================================================*/
/*==================================================================================================================*
**函数原型 : void DEV_SOFT_IIC::I2C_Stop(void)
**功    能 : 软件IIC停止信号
**输    入 : None
**输    出 : None
**备    注 : CPU发起I2C总线停止信号
**================================================================================================================*/
/*================================================================================================================*/	
void DEV_SOFT_IIC::I2C_Stop(void)
{
	/* 当SCL高电平时，SDA出现一个上跳沿表示I2C总线停止信号 */
	I2C_SDA_0();
	I2C_SCL_1();
	I2C_Delay();
	I2C_SDA_1();
}

/*==================================================================================================================*/
/*==================================================================================================================*
**函数原型 : void DEV_SOFT_IIC::I2C_SendByte(uint8_t _ucByte)
**功    能 : CPU向I2C总线设备发送8bit数据
**输    入 :  _ucByte ： 等待发送的字节
**输    出 : None
**备    注 : 
**================================================================================================================*/
/*================================================================================================================*/	
void DEV_SOFT_IIC::I2C_SendByte(uint8_t _ucByte)
{
	uint8_t i;

	/* 先发送字节的高位bit7 */
	for (i = 0; i < 8; i++)
	{
		if (_ucByte & 0x80)
		{
			I2C_SDA_1();
		}
		else
		{
			I2C_SDA_0();
		}
		I2C_Delay();
		I2C_SCL_1();
		I2C_Delay();
		I2C_SCL_0();
		if (i == 7)
		{
			 I2C_SDA_1(); // 释放总线
		}
		_ucByte <<= 1;	/* 左移一个bit */
		I2C_Delay();
	}
}


/*==================================================================================================================*/
/*==================================================================================================================*
**函数原型 : uint8_t DEV_SOFT_IIC::I2C_WaitAck(void)
**功    能 : CPU产生一个时钟，并读取器件的ACK应答信号
**输    入 : None
**输    出 : 返回0表示正确应答，1表示无器件响应
**备    注 : 
**================================================================================================================*/
/*================================================================================================================*/	
uint8_t DEV_SOFT_IIC::I2C_WaitAck(void)
{
	uint8_t re;

	I2C_SDA_1();	/* CPU释放SDA总线 */
	I2C_Delay();
	I2C_SCL_1();	/* CPU驱动SCL = 1, 此时器件会返回ACK应答 */
	I2C_Delay();
	if (I2C_SDA_READ())	/* CPU读取SDA口线状态 */
	{
		re = 1;
	}
	else
	{
		re = 0;
	}
	I2C_SCL_0();
	I2C_Delay();
	return re;
}

/*==================================================================================================================*/
/*==================================================================================================================*
**函数原型 : void DEV_SOFT_IIC::I2C_Ack(void)
**功    能 : CPU产生一个ACK信号
**输    入 : None
**输    出 : None
**备    注 : 
**================================================================================================================*/
/*================================================================================================================*/	
void DEV_SOFT_IIC::I2C_Ack(void)
{
	I2C_SDA_0();	/* CPU驱动SDA = 0 */
	I2C_Delay();
	I2C_SCL_1();	/* CPU产生1个时钟 */
	I2C_Delay();
	I2C_SCL_0();
	I2C_Delay();
	I2C_SDA_1();	/* CPU释放SDA总线 */
}

/*==================================================================================================================*/
/*==================================================================================================================*
**函数原型 : void DEV_SOFT_IIC::I2C_NAck(void)
**功    能 : CPU产生1个NACK信号
**输    入 : None
**输    出 : None
**备    注 : 
**================================================================================================================*/
/*================================================================================================================*/	
void DEV_SOFT_IIC::I2C_NAck(void)
{
	I2C_SDA_1();	/* CPU驱动SDA = 1 */
	I2C_Delay();
	I2C_SCL_1();	/* CPU产生1个时钟 */
	I2C_Delay();
	I2C_SCL_0();
	I2C_Delay();
}
/*==================================================================================================================*/
/*==================================================================================================================*
**函数原型 :uint8_t I2C_CheckDevice(uint8_t _Address)
**功    能 : 软件IIC延迟
**输    入 : _Address：设备的I2C总线地址
**输    出 : 返回值 0 表示正确， 返回1表示未探测到
**备    注 : 检测I2C总线设备，CPU向发送设备地址，然后读取设备应答来判断该设备是否存在
**================================================================================================================*/
/*================================================================================================================*/	

uint8_t DEV_SOFT_IIC::I2C_CheckDevice(uint8_t _Address)
{
	uint8_t ucAck;

	if (I2C_SDA_READ() && I2C_SCL_READ())
	{
		I2C_Start();		/* 发送启动信号 */

		/* 发送设备地址+读写控制bit（0 = w， 1 = r) bit7 先传 */
		I2C_SendByte(_Address | I2C_WR);
		ucAck = I2C_WaitAck();	/* 检测设备的ACK应答 */

		I2C_Stop();			/* 发送停止信号 */

		return ucAck;
	}
	return 1;	/* I2C总线异常 */
}

/*==================================================================================================================*/
/*==================================================================================================================*
**函数原型 : uint8_t DEV_SOFT_IIC::I2C_ReadByte(void)
**功    能 : CPU从I2C总线设备读取8bit数据
**输    入 : None
**输    出 : 读到的数据
**备    注 : 
**================================================================================================================*/
/*================================================================================================================*/	
uint8_t DEV_SOFT_IIC::I2C_ReadByte(void)
{
	uint8_t i;
	uint8_t value;

	/* 读到第1个bit为数据的bit7 */
	value = 0;
	for (i = 0; i < 8; i++)
	{
		value <<= 1;
		I2C_SCL_1();
		I2C_Delay();
		if (I2C_SDA_READ())
		{
			value++;
		}
		I2C_SCL_0();
		I2C_Delay();
	}
	return value;
}

/*==================================================================================================================*/
/*==================================================================================================================*
**函数原型 :uint8_t DEV_SOFT_IIC::I2C_ReadByte1(uint8_t ask)
**功    能 : CPU从I2C总线设备读取8bit数据
**输    入 : None
**输    出 : 读到的数据
**备    注 : 
**================================================================================================================*/
/*================================================================================================================*/	
uint8_t DEV_SOFT_IIC::I2C_ReadByte1(uint8_t ask)
{
 	  u8 i=8;
    u8 ReceiveByte=0;

    I2C_SDA_1();				
    while(i--)
    {
      ReceiveByte<<=1;      
      
      I2C_SCL_0();
			I2C_Delay();
			I2C_SCL_1();
      I2C_Delay();	
      if(I2C_SDA_READ())
      {
        ReceiveByte|=0x01;
      }
    }
   I2C_SCL_0();

	if (ask)
		I2C_Ack();
	else
		I2C_NAck();  
    return ReceiveByte;


}

/*==========================================================================================================================*/
/*==========================================================================================================================*
**函数原型 :uint8_t IIC_Read_nByte(uint8_t SlaveAddress, uint8_t REG_Address, uint8_t len, uint8_t *buf)
**功    能 : 软件IIC读多个字节
**输    入 : 
**输    出 : 
**备    注 : 
**========================================================================================================================*/
/*========================================================================================================================*/	
uint8_t DEV_SOFT_IIC::IIC_Read_nByte(uint8_t SlaveAddress, uint8_t REG_Address, uint8_t len, uint8_t *buf)
{	
	I2C_Start();
	I2C_SendByte(SlaveAddress<<1); 
	if(I2C_WaitAck())
	{
		I2C_Stop();
		return 1;
	}
	I2C_SendByte(REG_Address); 
	I2C_WaitAck();
	
	I2C_Start();
	I2C_SendByte(SlaveAddress<<1 | 0x01); 
	I2C_WaitAck();
	while(len) 
	{
		if(len == 1)
		{
			*buf = I2C_ReadByte1(0);
		}
		else
		{
			*buf = I2C_ReadByte1(1);
		}
		buf++;
		len--;
	}
	I2C_Stop();
	return 0;
}


/*==========================================================================================================================*/
/*==========================================================================================================================*
**函数原型 :uint8_t DEV_SOFT_IIC::IIC_Write_1Byte(uint8_t SlaveAddress,uint8_t REG_Address,uint8_t REG_data)
**功    能 :软件IIC写1个字节
**输    入 : 
**输    出 : 
**备    注 : 
**========================================================================================================================*/
/*========================================================================================================================*/

uint8_t DEV_SOFT_IIC::IIC_Write_1Byte(uint8_t SlaveAddress,uint8_t REG_Address,uint8_t REG_data)
{
	I2C_Start();
	I2C_SendByte(SlaveAddress<<1);   
	if(I2C_WaitAck())
	{
		I2C_Stop();
		return 1;
	}
	I2C_SendByte(REG_Address);       
	I2C_WaitAck();	
	I2C_SendByte(REG_data);
	I2C_WaitAck();   
	I2C_Stop(); 
	return 0;
}


/*==========================================================================================================================*/
/*==========================================================================================================================*
**函数原型 :uint8_t DEV_SOFT_IIC::IIC2_Write_nByte(uint8_t SlaveAddress, uint8_t REG_Address, uint8_t *pBuffer,uint8_t len)
**功    能 : 软件IIC写多个字节
**输    入 : 
**输    出 : 
**备    注 : 
**========================================================================================================================*/
/*========================================================================================================================*/	
uint8_t DEV_SOFT_IIC::IIC2_Write_nByte(uint8_t SlaveAddress, uint8_t REG_Address, uint8_t *pBuffer,uint8_t len)
{
	uint8_t i;
	I2C_Start();
  I2C_SendByte(SlaveAddress);
	if(I2C_WaitAck())
	{
		I2C_Stop();
		return 1;
	}
	I2C_SendByte(REG_Address);
	I2C_WaitAck();
	for(i=0;i<len;i++)
	{
		I2C_SendByte(pBuffer[i]); 
		if(I2C_WaitAck())
		{
		 	I2C_Stop();
	    return 1;
		}
	
	}
	I2C_Stop();
	return 0;
	
}


/*******************************************************************************************************************
*                                      file---end
*******************************************************************************************************************/
